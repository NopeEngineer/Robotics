// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2509.Robot2016aMD;

import org.usfirst.frc2509.Robot2016aMD.commands.*;
import org.usfirst.frc2509.Robot2016aMD.subsystems.*;
import org.usfirst.frc2509.Robot2016aMD.commands.AutonomousCommand;
import org.usfirst.frc2509.Robot2016aMD.subsystems.Arms;
import org.usfirst.frc2509.Robot2016aMD.subsystems.Elevator;
import org.usfirst.frc2509.Robot2016aMD.subsystems.Grips;
import org.usfirst.frc2509.Robot2016aMD.subsystems.Guides;
import org.usfirst.frc2509.Robot2016aMD.subsystems.DriveTrain;

import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;

    public static OI oi;
    public static Compressor comp;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static Grips grip;
    public static Guides guide;
    public static Elevator lift;
    public static Arms arm;


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	
    public static Joystick lStick;
	Joystick rStick;
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    	//Subsystem Variables
    	final OI oi;
    	final Arms arms;
    	Guides guides;
    	Grips grips;
    	Elevator lift;
    	DriveTrain driveTrain;
    	// Joysticks
   	
    	comp = RobotMap.comp;
        driveTrain = new DriveTrain();
        grip = new Grips();
        guide = new Guides();
        lift = new Elevator();
        arm = new Arms();
       
        oi = new OI();
           

        autonomousCommand = new AutonomousCommand();
        lStick = Robot.oi.lStick;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        //comp.start(); still need to finsih
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
  
    }

    public void teleopInit() {
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
    	while(isEnabled()&&isOperatorControl()){
    		Scheduler.getInstance().run();
    		Robot.robotDriveOpControl(lStick, rStick);
    		Robot.oi.CheckDigital();
    	}
        
    }

    private static void robotDriveOpControl(Joystick lStick2, Joystick rStick2) {
		// TODO Auto-generated method stub
		
	}
	/**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}