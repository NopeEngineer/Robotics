// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2509.Robot2016aMD;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.*;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainlMotor;
    public static SpeedController driveTrainrMotor;
    public static RobotDrive robotDrive;
    public static DoubleSolenoid gripPiston;
    public static DoubleSolenoid guidePiston;
    public static SpeedController liftlMotor;
    public static SpeedController liftrMotor;
    public static DoubleSolenoid armPiston;
    public static Compressor comp1;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public static Compressor comp;
	public static DigitalInput LimitSwitch1;
	public static DigitalInput LimitSwitch2;
	public static DigitalInput LimitSwitch3;
	public static DigitalInput LimitSwitch4;
	

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    	driveTrainlMotor = new Talon(0);
        LiveWindow.addActuator("RobotDrive", "lMotor", (Talon) driveTrainlMotor);
        //driveTrainlMotor.setInverted(true);
        
        driveTrainrMotor = new Talon(1);
        LiveWindow.addActuator("RobotDrive", "rMotor", (Talon) driveTrainrMotor);
        //driveTrainrMotor.setInverted(true);
        
        robotDrive = new RobotDrive(driveTrainlMotor, driveTrainrMotor);
        
        robotDrive.setSafetyEnabled(false);
        robotDrive.setExpiration(0.1);
        robotDrive.setSensitivity(0.5);
        robotDrive.setMaxOutput(1.0);

        gripPiston = new DoubleSolenoid(0, 0, 1);
        LiveWindow.addActuator("Grip", "Piston", gripPiston);
        
        guidePiston = new DoubleSolenoid(0, 2, 3);
        LiveWindow.addActuator("Guide", "Piston", guidePiston);
        
        liftlMotor = new Talon(2);
        LiveWindow.addActuator("Lift", "lMotor", (Talon) liftlMotor);
        
        liftrMotor = new Talon(3);
        LiveWindow.addActuator("Lift", "rMotor", (Talon) liftrMotor);
        
        armPiston = new DoubleSolenoid(0, 4, 5);
        LiveWindow.addActuator("Arm", "Piston", armPiston);
        
        
        
        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        comp = new Compressor();

  
        //LimitSwitches, Label more effectively in the future
LimitSwitch1 = new DigitalInput(0);
	LiveWindow.addSensor("limitswitch", 0, LimitSwitch1);
LimitSwitch2 = new DigitalInput(1);
	LiveWindow.addSensor("limitswitch", 1, LimitSwitch2);
LimitSwitch3 = new DigitalInput(2);
	LiveWindow.addSensor("limitswitch", 2, LimitSwitch3);
LimitSwitch4 = new DigitalInput(3);
	LiveWindow.addSensor("limitswitch", 3, LimitSwitch4);
    }
}